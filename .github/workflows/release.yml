name: Build release
on:
  push:
    branches:
      - master
    tags:
      - v*

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}
      - name: Cache rust build
        uses: actions/cache@v3
        with:
          path: |
            target
            ~/.cargo/registry
          key: rust-build-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('Cargo.lock') }}
      - name: Install musl tools
        run: sudo apt-get install -y musl-tools
      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.target != 'x86_64-unknown-linux-musl' }}
          args: --release --target ${{ matrix.target }}
      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: kubectl-why-can-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/kubectl-why-can
          retention-days: 7

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "0"
      - name: Extract Git version from ref
        id: git_version
        run: echo "version=$(echo ${GITHUB_REF#refs/tags/})" >> ${GITHUB_OUTPUT}
        env:
          GITHUB_REF: ${{ github.ref }}
      - name: Read Cargo.toml
        id: cargo_version
        uses: SebRollen/toml-action@v1.0.0
        with:
          file: Cargo.toml
          field: package.version
      - name: Verify that tag matches Cargo.toml version
        run: |
          if [ "v${{ steps.cargo_version.outputs.value }}" != "${{ steps.git_version.outputs.version }}" ]; then
            exit 1
          fi
      - name: Build changelog from PRs with labels
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          configuration: ".github/changelog-configuration.json"
          # PreReleases still get a changelog, but the next full release gets a diff since the last full release,
          # combining possible changelogs of all previous PreReleases in between.
          # PreReleases show a partial changelog since last PreRelease.
          ignorePreReleases: "${{ !contains(github.ref, '-rc') }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Read release message from tag commit
        id: tag_message
        run: |
          git fetch origin +refs/tags/*:refs/tags/*
          # Extract tag message
          TAG_MSG=$(git tag -n --format='%(contents:body)' ${GITHUB_REF##refs/tags/} | tr -d '\r')
          # Escape literal % and newlines (\n, \r) for github actions output
          TAG_MSG=${TAG_MSG//'%'/%25}
          TAG_MSG=${TAG_MSG//$'\n'/%0A}
          # Join multiple lines belonging to the same paragraph for GitHub
          # markdown.
          # Paragraph breaks should be %0A%0A. We replace single line breaks
          # with a space with sed.
          TAG_MSG=$(echo ${TAG_MSG} |sed 's/\([^A]\)%0A\([^%]\)/\1 \2/g')
          # Set action output `messsage`
          echo "::set-output name=message::${TAG_MSG}"
        env:
          GITHUB_REF: ${{ github.ref }}
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          body: "# Summary\n\n${{steps.tag_message.outputs.message}}\n\n# Changes\n\n${{steps.build_changelog.outputs.changelog}}"
          prerelease: "${{ contains(github.ref, '-rc') }}"
          # Ensure target branch for release is "master"
          commit: master
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Download all binaries
        uses: actions/download-artifact@v3
        with:
          path: binaries
      - name: Finalize binaries for release
        run: |
          mv binaries/kubectl-why-can-x86_64-unknown-linux-musl/kubectl-why-can kubectl-why-can-linux-x86_64
          mv binaries/kubectl-why-can-aarch64-unknown-linux-musl/kubectl-why-can kubectl-why-can-linux-aarch64
          chmod +x ./kubectl-why-can*
      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            kubectl-why-can-linux-x86_64
            kubectl-why-can-linux-aarch64
